const devel = 'devel/';
const deploy = 'deploy/';
const assetsSrc = devel + 'assets/';
const assetsDest = deploy + 'assets/';
const bower = 'bower_components/';
const nodeModules = 'node_modules/';

const paths = {

	deploy: './' + deploy + '/**/*',

	delete: {
		deploy: deploy + '/*.html'
	},

	html: {
		src: devel + '/**/*.+(html|md)',
		dest: deploy
	},

	handlebars: {
		src: devel + '/**/*.handlebars',
		partials: devel + 'templates/partials/',
		dest: deploy,
		watch: devel + '**/*.handlebars'
	},

	styles: {
		src: assetsSrc + '_sass/main.scss',
		watch: assetsSrc + '_sass/**/*.+(scss|sass)',
		dest: assetsDest + 'generated/'
	},

	scripts: {
		src: assetsSrc + '_scripts/',
		watch: assetsSrc + '_scripts/**/*.js',
		dest: assetsDest + 'generated/'
	},

	sassUtils: {

		bourbon: {
			src: bower + 'bourbon/core/**/*.+(scss|sass)',
			dest: assetsSrc + '_sass/utils/bourbon/'
		},
		bitters: {
			src: bower + 'bitters/core/**/*.+(scss|sass)',
			dest: assetsSrc + '_sass/utils/bitters/'
		},
		normalize: {
			src: bower + 'normalize-scss/**/*.+(scss|sass)',
			dest: assetsSrc + '_sass/utils/normalize/'
		},
		fontAwesome: {
			src: bower + 'font-awesome/scss/**/*.+(scss|sass)',
			dest: assetsSrc + '_sass/utils/font-awesome/'
		},
		fontAwesomeFont: {
			src: bower + 'font-awesome/fonts/**/*.+(eot|svg|woff|woff2|ttf)',
			dest: assetsSrc + '_data/fonts/font-awesome/'
		}
	},

	libs: {
		d3: {
			src: nodeModules + 'd3/build/d3.min.js',
			dest: assetsDest
		},
		jquery: {
			src: bower + 'jquery/dist/jquery.min.js',
			dest: assetsDest + 'offline/'
		},

		jquerySlim: {
			src: bower + 'jquery/dist/jquery.slim.min.js',
			dest: assetsDest + 'offline/'
		}
	},

	data: {
		images: {
			src: assetsSrc + '_data/images/**/*.+(png|jpg|svg|gif)',
			dest: assetsDest + '_data/images/'
		},
		json: {
			src: assetsSrc + '_data/json/',
			dest: assetsDest + '_data/json/',
			watch: assetsSrc + '_data/json/**/*.json'
		},
		fonts: {
			src: assetsSrc + '_data/fonts/**/*.+(eot|svg|woff|woff2|ttf)',
			dest: assetsDest + '_data/fonts/'
		}
	},

	merged: {
		dest: assetsDest + 'offline/merged/'
	}
};


const renderedNames = {
	javascript: {

		/* MY MERGED JAVASCRIPT */
		scripts: 'scripts.js',

		/* MERGED LIBS */
		all: 'libs.min.js'
	}
};

const ignoreModernizr = '!' + paths.scripts.src + 'autogenerated/modernizr.js';
const watchedJsFiles = [ignoreModernizr, paths.scripts.src];

function filterObject(obj,newObj, exclude) {
	Object.keys(obj).forEach(function (key) {
		if (key !== exclude) {
			if (typeof(obj[key]) == "object") {
				newObj[key] = {};
				filterObject(obj[key],newObj[key]);
			} else {
				newObj[key] = obj[key];
			}
		}
	});
}

module.exports = {
	paths: paths,
	ignoreModernizr: ignoreModernizr,
	watchedJsFiles: watchedJsFiles,
	renderedNames: renderedNames,
	filterObject: filterObject
};
